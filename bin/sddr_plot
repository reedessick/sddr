#!/usr/bin/env python

__usage__ = "sddr_plot [--options]"
__doc__ = "a plotting script"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

import matplotlib
matplotlib.use("Agg")
from maptlolib import pyplot as plt

from collections import defaultdict

from optparse import OptionParser

#-------------------------------------------------

spin2linestyle = {
    0.050 : 'solid',
    0.890 : 'dashed',
}

spin2color = {
    0.050 : 'b',
    0.890 : 'r',
}

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-i', '--input', nargs=3, default=[], type='string',
    help='the flow, spin, and path for a cdf file. \
e.g.: --input 30 0.05 sddr.txt')

parser.add_option('-a', '--annotate', nargs=4, default=[], type='string',
    help='the flow, spin, value and label for an annotation. \
e.g.: --input 30 0.05 -0.10 "marginalized kde"')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

assert opts.input, 'please supply at least one --input option\n%s'%__usage__
opts.input = [(float(flow), float(spin), path) for flow, spin, path in opts.input]
opts.annotate = [(float(flow), float(spin), value, string) for flow, spin, value, string in opts.annotate]

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

#-------------------------------------------------

data = defaultdict(dict)
for flow, spin, path in opts.input:
    if opts.verbose:
        print('reading: '+path)
    data[flow].update({spin:np.loadtxt(path).transpose()})

#---

if opts.verbose:
    print('plotting')

figwidth = 8
figheight = 4

fig = plt.figure(figsize=(figwidth, figheight))
ax = fig.gca()

flows = np.array(sorted(data.keys()))
df = np.min(np.diff(flows))*0.9

for flow in sorted(data.keys()):
    for spin in sorted(data[flow].keys()):
        logbayes, cdf = data[flow][spin]
        pdf = np.gradient(cdf, np.gradient(logbayes))

        #                                                        flip the sign so we plot lnB^NL_PP
        ax.plot(np.ones_like(logbayes)*flow + df*pdf/np.max(pdf), -logbayes, linestyle=spin2linestyle[spin], color=spin2color[spin])

for flow, spin, value, string in opts.annotate:
    ax.plot([flow, flow+df], [value]*2, color=spin2color[spin], linestyle=spin2linestyle[spin])
    ax.text(flow+df, value, string, color=spin2color[spin], ha='left', va='center')

ax.set_xlabel('$f_\mathrm{low}$ [Hz]$')
ax.set_ylabel('$\log B^\mathrm{NL}_\mathrm{PP}$')

ax.grid(True, which='both')

figname = '%s/sddr_plot%s.png'%(opts.output_dir, opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
