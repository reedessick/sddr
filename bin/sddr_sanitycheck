#!/usr/bin/env python

__usage__ = "sddr_sanitycheck [--options] samples.hdf5 [samples.hdf5 samples.hdf5 ...]"
__doc__ = "a plotting script"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from optparse import OptionParser

### non-standard libraries
from sddr import utils

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')
parser.add_option('-V', '--Verbose', default=False, action='store_true')

parser.add_option('', '--field', default=utils.DEFAULT_FIELD, type='string')
parser.add_option('', '--deltaLogP', default=utils.DEFAULT_DELTALOGP, type='float',
    help='used when stripping burn-in from hdf5 files')

parser.add_option('', '--prior-min', default=utils.DEFAULT_PRIOR_MIN, type='float')
parser.add_option('', '--prior-max', default=utils.DEFAULT_PRIOR_MAX, type='float')
parser.add_option('', '--num-points', default=utils.DEFAULT_NUM_POINTS, type='int')

parser.add_option('', '--hist-bins', default=None, type='int')

parser.add_option('', '--kde-b', default=utils.DEFAULT_B, type='float')

parser.add_option('', '--kde-b-range', nargs=2, default=utils.DEFAULT_B_RANGE, type='float')
parser.add_option('', '--kde-rtol', default=utils.DEFAULT_RTOL, type='float')

parser.add_option('', '--kde-dlogl', default=utils.DEFAULT_DLOGL, type='float')
parser.add_option('', '--kde-num-points', default=utils.DEFAULT_NUM_POINTS, type='int')
parser.add_option('', '--kde-b-prior', default=utils.DEFAULT_B_PRIOR, type='string')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

assert args, 'please supply at least one argument\n%s'%__usage__

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

opts.verbose |= opts.Verbose

#-------------------------------------------------

### read in samples
samples = utils.load(args, field=opts.field, deltaLogP=opts.deltaLogP, verbose=opts.verbose)

#-------------------------------------------------

### generate sample points...
points = np.linspace(opts.prior_min, opts.prior_max, opts.num_points)

fig = plt.figure()
ax = fig.gca()

# plot histogram
if opts.verbose:
    print('working on histogram')
bins = utils._get_hist_bins(len(samples))
ax.hist(samples, bins=bins, histtype='step', label='$\mathrm{hist}$', normed=True, alpha=0.75)

# compute kde with fixed bandwidth
if opts.verbose:
    print('working on kde with fixed bandwidth')
logkde = [utils._compute_logkde(x, samples, b=opts.kde_b, prior_min=opts.prior_min, prior_max=opts.prior_max) for x in points]

ax.plot(points, np.exp(logkde), label='$K(x|b=%.3f, d)$'%opts.kde_b, alpha=0.75)

# find best bandwidth, compute kde
if opts.verbose:
    print('working on kde with optimal bandwidth')
max_b = utils.optimize_bandwidth(samples, *opts.kde_b_range, rtol=opts.kde_rtol, verbose=opts.Verbose)
if opts.Verbose:
    print('    max_b=%.3e'%max_b)
max_logkde = [utils._compute_logkde(x, samples, b=max_b, prior_min=opts.prior_min, prior_max=opts.prior_max) for x in points]

ax.plot(points, np.exp(max_logkde), label='$K(x|b_\mathrm{max}=%.3f, d)$'%max_b, alpha=0.75)

# marginalize over bandwidth, compute kde
if opts.verbose:
    print('working on kde marginalized over bandwidth')
bs, weights = utils.marginalize_bandwidth(samples, *opts.kde_b_range, rtol=opts.kde_rtol, dlogl=opts.kde_dlogl, num_points=opts.kde_num_points, prior=opts.kde_b_prior, verbose=opts.Verbose)
marg_logkde = [np.log(np.sum([weight*np.exp(utils._compute_logkde(x, samples, b=b, prior_min=opts.prior_min, prior_max=opts.prior_max)) for b, weight in zip(bs, weights)])) for x in points]

ax.plot(points, np.exp(marg_logkde), label='$\int db\, K(x|b;d) p(b|d)$', alpha=0.75)

### decorate
ax.set_xlabel('$\log_{10} A_0$')
plt.setp(ax.get_yticklabels(), visible=False)

ax.grid(True, which='both')
ax.legend(loc='best')

### save
figname = '%s/sddr_sanitycheck%s.png'%(opts.output_dir, opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
