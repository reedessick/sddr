#!/usr/bin/env python

__doc__ = "a plotting script"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from collections import defaultdict

from argparse import ArgumentParser

#-------------------------------------------------

spin2linestyle = {
    0.050 : 'solid',
    0.890 : 'dashed',
}

spin2color = {
    0.050 : 'b',
    0.890 : 'r',
}

#-------------------------------------------------

parser = ArgumentParser(description=__doc__)

parser.add_argument('-v', '--verbose', default=False, action='store_true')

parser.add_argument('-i', '--input', nargs=2, default=[], type=str, action='append',
    help='the label and path for a cdf file. \
e.g.: --input label sddr.txt')

parser.add_argument('-a', '--annotate', nargs=2, default=[], type=str, action='append',
    help='the label and value for an annotation. \
e.g.: --annotate "marginalized kde" 0.3')

parser.add_argument('--no-legend', default=False, action='store_true')

parser.add_argument('--xmin', default=None, type=float)
parser.add_argument('--xmax', default=None, type=float)
parser.add_argument('--summed', default=False, action='store_true',
    help='plot the summed distributions instead of individual distributions. \
Requires both --xmin and --xmax to be provided.')

parser.add_argument('--ignore-nan', default=False, action='store_true')

parser.add_argument('-o', '--output-dir', default='.', type=str)
parser.add_argument('-t', '--tag', default='', type=str)

args = parser.parse_args()

assert args.input, 'please supply at least one --input option'
args.annotate = [(label if label!='EMPTY' else '', float(value)) for label, value in args.annotate]

if not os.path.exists(args.output_dir):
    os.makedirs(args.output_dir)

if args.tag:
    args.tag = "_"+args.tag

if args.summed and ((args.xmin is None) or (args.xmax is None)):
    raise ValueError('please specify both --xmin and --xmax when using --summed')

#-------------------------------------------------

figwidth = 8
figheight = 10

fig = plt.figure(figsize=(figwidth, figheight))
AX = plt.subplot(2,1,1)
ax = plt.subplot(2,1,2)

if args.summed:
    LOGBAYES = np.linspace(args.xmin, args.xmax, 1001)
    CDF = np.zeros_like(LOGBAYES, dtype='float')
    count = 0

for label, path in args.input:
    if args.verbose:
        print('reading: '+path)
    logbayes, cdf = np.genfromtxt(path, skiprows=1).transpose()

    if np.any(cdf!=cdf):
        if args.ignore_nan:
            continue
        else:
            raise ValueError, 'ran into a nan!'

    #      flip this so we get NL - PP
    logbayes *= -1

    if args.summed:
        CDF += np.interp(LOGBAYES, logbayes[::-1], cdf[::-1]) ### reverse order so interpolation makes sense
        count += 1

    else:
        AX.plot(logbayes, cdf, label=label)
        ax.plot(logbayes, -np.gradient(cdf, np.gradient(logbayes)), label=label)

if args.summed:
    CDF /= count
    AX.plot(LOGBAYES, CDF)
    ax.plot(LOGBAYES, -np.gradient(CDF, np.gradient(LOGBAYES)))

ylim = ax.get_ylim()
YLIM = AX.get_ylim()
dx = np.diff(ax.get_xlim())*0.01
dy = np.diff(YLIM)*0.01
DY = dy*10
args.annotate.sort(key=lambda l: l[1])
for i, (label, value) in enumerate(args.annotate):
    ax.plot([value]*2, ylim, 'k--')
    AX.plot([value]*2, YLIM, 'k--')
    AX.text(value+dx, YLIM[1]-i*DY-dy, ' '+label, ha='left', va='top')

AX.set_ylim(YLIM)
ax.set_ylim(ylim)

if args.xmin is not None:
    ax.set_xlim(xmin=args.xmin)
if args.xmax is not None:
    ax.set_xlim(xmax=args.xmax)
AX.set_xlim(ax.get_xlim())

plt.setp(AX.get_xticklabels(), visible=False)
AX.set_ylabel('cdf')
ax.set_xlabel('$\log B^\mathrm{NL}_\mathrm{PP}$')
ax.set_ylabel('pdf')

AX.grid(True, which='both')
ax.grid(True, which='both')

if not args.no_legend:
    ax.legend(loc='best')

plt.subplots_adjust(
    hspace=0.01,
    wspace=0.01,
)

figname = "%s/sddr%s.png"%(args.output_dir, args.tag)
if args.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
