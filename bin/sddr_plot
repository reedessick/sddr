#!/usr/bin/env python

__usage__ = "sddr_plot [--options]"
__doc__ = "a plotting script"
__author__ = "reed.essick@ligo.org"

#-------------------------------------------------

import os

import numpy as np

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt
plt.rcParams['text.usetex'] = True

from collections import defaultdict

from optparse import OptionParser

#-------------------------------------------------

spin2linestyle = {
    0.050 : 'solid',
    0.890 : 'dashed',
}

spin2color = {
    0.050 : 'b',
    0.890 : 'r',
}

#-------------------------------------------------

parser = OptionParser(usage=__usage__, description=__doc__)

parser.add_option('-v', '--verbose', default=False, action='store_true')

parser.add_option('-i', '--input', nargs=2, default=[], type='string', action='append',
    help='the label and path for a cdf file. \
e.g.: --input label sddr.txt')

parser.add_option('-a', '--annotate', nargs=2, default=[], type='string', action='append',
    help='the label and value for an annotation. \
e.g.: --annotate "marginalized kde" 0.3')

parser.add_option('-o', '--output-dir', default='.', type='string')
parser.add_option('-t', '--tag', default='', type='string')

opts, args = parser.parse_args()

assert opts.input, 'please supply at least one --input option\n%s'%__usage__
opts.annotate = [(label, float(value)) for label, value in opts.annotate]

if not os.path.exists(opts.output_dir):
    os.makedirs(opts.output_dir)

if opts.tag:
    opts.tag = "_"+opts.tag

#-------------------------------------------------

figwidth = 8
figheight = 10

fig = plt.figure(figsize=(figwidth, figheight))
AX = plt.subplot(2,1,1)
ax = plt.subplot(2,1,2)

for label, path in opts.input:
    if opts.verbose:
        print('reading: '+path)
    logbayes, cdf = np.genfromtxt(path, skiprows=1).transpose()

    #      flip this so we get NL - PP
    AX.plot(-logbayes, cdf, label=label)
    ax.plot(-logbayes, np.gradient(cdf, np.gradient(logbayes)), label=label)

ylim = ax.get_ylim()
YLIM = AX.get_ylim()
dx = np.diff(ax.get_xlim())*0.01
dy = np.diff(ylim)*0.01
DY = dy*10
opts.annotate.sort(key=lambda l: l[1])
for i, (label, value) in enumerate(opts.annotate):
    ax.plot([value]*2, ylim, 'k--')
    AX.plot([value]*2, YLIM, 'k--')
    AX.text(value+dx, YLIM[1]-i*DY-dy, ' '+label, ha='left', va='top')

AX.set_ylim(YLIM)
ax.set_ylim(ylim)

plt.setp(AX.get_xticklabels(), visible=False)
AX.set_ylabel('cdf')
ax.set_xlabel('$\log B^\mathrm{NL}_\mathrm{PP}$')
ax.set_ylabel('pdf')

AX.grid(True, which='both')
ax.grid(True, which='both')
ax.legend(loc='best')

plt.subplots_adjust(
    hspace=0.01,
    wspace=0.01,
)

figname = "%s/sddr%s.png"%(opts.output_dir, opts.tag)
if opts.verbose:
    print('saving: '+figname)
fig.savefig(figname)
plt.close(fig)
